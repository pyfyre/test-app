__BRYTHON__.use_VFS = true;
var scripts = {"$timestamp": 1645286112197, "pyfyre.pyfyre": [".py", "from browser import document\nfrom pyfyre.globals import Globals\ndef runApp(app,mount=\"app-mount\"):\n body=document.getElementById(mount)\n body.innerHTML=\"\"\n body.appendChild(app.dom())\n Globals.__PARENT__=app\n", ["browser", "pyfyre.globals"]], "pyfyre": [".py", "", [], 1], "pyfyre.ajax": [".py", "from browser import ajax\nclass Ajax:\n @staticmethod\n def get(url,mode=\"json\",then=None ):\n  ajax.get(url,mode=mode,oncomplete=then)\n", ["browser"], 1], "pyfyre.core.exceptions": [".py", "from pyfyre.widgets.widget import Widget\nclass UIBaseException:\n def __init__(self,msg,e):\n  self.msg=msg\n  self.e=e\n def dom(self):\n  print(f\"Uncaught exception: {self.e}\")\n  return self.TextException(self.msg).dom()\n class TextException(Widget):\n  def __init__(self,msg:str,className=\"\",props:dict=None ):\n   super().__init__(\"h1\",className=className,props=props)\n   self.msg=msg\n  def dom(self):\n   element=super().dom()\n   element.textContent=self.msg\n   element.attrs[\"style\"]=\"background-color: #efa3a3; width: fit-content; padding: 10px;\"\n   return element\nclass RenderError(UIBaseException):...\nclass InvalidController(BaseException):...\n", ["pyfyre.widgets.widget"]], "pyfyre.core.initializeEnvironment": [".py", "from pyfyre.globals import Globals\nfrom pyfyre import settings\ndef initializeEnvironment():\n Globals.DEBUG=settings.DEBUG\n", ["pyfyre", "pyfyre.globals"]], "pyfyre.core": [".py", "", [], 1], "pyfyre.globals.events": [".py", "from pyfyre.globals import Globals\nclass Events:\n @staticmethod\n def add(event):\n  Globals.__EVENTS__[event]=[]\n @staticmethod\n def addListener(event,listener):\n  Globals.__EVENTS__[event].append(listener)\n @staticmethod\n def broadcast(event):\n  for func in Globals.__EVENTS__[event]:\n   func()\n", ["pyfyre.globals"]], "pyfyre.globals": [".py", "class Globals:\n DEBUG=False\n __PARENT__=None\n __LOC__=None\n __ROUTES__=[]\n __EVENTS__={}\n__all__=['Events','Globals']\n", [], 1], "pyfyre.router": [".py", "from pyfyre.globals import Globals\nfrom pyfyre.globals.events import Events\nfrom pyfyre.pyfyre import runApp\nfrom browser import window,bind\nclass Router:\n def __init__(self,routes):\n  self.routes:dict=routes\n  self.initializeWindowLocation()\n  self.listenRouteEvents()\n  self.subscribeRoutes()\n def dom(self):\n  if Globals.__LOC__ in self.routes.keys():\n   return self.routes[Globals.__LOC__].dom()\n  _,pathurl=self.get_params()\n  for route in Globals.__ROUTES__:\n   if route[0]==pathurl:\n    return route[2].dom()\n  raise Exception(\"Path 404: Cannot find the path.\")\n @staticmethod\n def query():\n  query,pathurl=Router.get_params(Router)\n  queryNames={}\n  for route in Globals.__ROUTES__:\n   if route[0]==pathurl:\n    queryNames[route[1]]=query\n  return queryNames\n @staticmethod\n def push(location):\n  Globals.__LOC__=location\n  Events.broadcast(\"change_route\")\n  window.history.pushState(None ,None ,location)\n  @bind(window,'popstate')\n  def popState(e):\n   Globals.__LOC__=window.location.pathname\n   Events.broadcast(\"change_route\")\n   e.preventDefault()\n def get_params(self):\n  path=f\"{Globals.__LOC__}\"\n  pathname=path.split('/')\n  query=pathname[-1]\n  pathurl=pathname[-2]\n  return query,pathurl\n def initializeWindowLocation(self):\n  if not Globals.__LOC__:\n   Globals.__LOC__=window.location.pathname\n def listenRouteEvents(self):\n  if not \"change_route\"in Globals.__EVENTS__:\n   Events.add(\"change_route\")\n   def changeRoute():\n    runApp(Globals.__PARENT__)\n   Events.addListener(\"change_route\",changeRoute)\n def subscribeRoutes(self):\n  for routeName,view in self.routes.items():\n   pathnames=routeName.split('/')\n   for pathname in pathnames:\n    if len(pathname)<=0:return\n    if pathname[0]==\":\":\n     pathname.replace(\":\",\"\")\n     Globals.__ROUTES__.append([pathnames[-2],pathname,view])\n", ["browser", "pyfyre.globals", "pyfyre.globals.events", "pyfyre.pyfyre"], 1], "pyfyre.widgets.button": [".py", "from pyfyre.widgets.widget import Widget\nclass Button(Widget):\n def __init__(self,textContent,onClick=lambda :print(\"\"),className=\"\",props:dict=None ):\n  super().__init__(\"button\",className=className,props=props)\n  self.textContent=textContent\n  self.onClick=onClick\n def dom(self):\n  element=super().dom()\n  element.textContent=self.textContent\n  element.bind(\"click\",self.onClick)\n  return element\n", ["pyfyre.widgets.widget"]], "pyfyre.widgets.clickable": [".py", "from pyfyre.widgets.widget import Widget\nclass Clickable(Widget):\n def __init__(self,bind,onClick,className=\"\",props:dict=None ):\n  super().__init__(\"div\",className=className,props=props)\n  self.bind=bind\n  self.onclick=onClick\n def dom(self):\n  element=super().dom()\n  element.appendChild(self.bind.dom())\n  element.bind(\"click\",self.onclick)\n  return element\n", ["pyfyre.widgets.widget"]], "pyfyre.widgets.container": [".py", "from pyfyre.widgets.widget import Widget\nclass Container(Widget):\n def __init__(self,children=[],className=\"\",props:dict=None ):\n  super().__init__(\"div\",className=className,props=props)\n  self.children=children\n def dom(self):\n  element=super().dom()\n  for child in self.children:\n   element.appendChild(child.dom())\n  return element\n", ["pyfyre.widgets.widget"]], "pyfyre.widgets.image": [".py", "from pyfyre.widgets.widget import Widget\nclass Image(Widget):\n def __init__(self,src,className=\"\",props:dict=None ):\n  super().__init__(\"img\",className=className,props=props)\n  self.src=src\n def dom(self):\n  element=super().dom()\n  element.src=self.src\n  return element\n", ["pyfyre.widgets.widget"]], "pyfyre.widgets.link": [".py", "from pyfyre.widgets.widget import Widget\nfrom pyfyre.router import Router\nclass Link(Widget):\n def __init__(self,textContent:str,to='/',external=False ,className=\"\",props:dict=None ):\n  super().__init__(\"a\",className=className,props=props)\n  self.textContent=textContent\n  self.to=to\n  self.external=external\n def dom(self):\n  element=super().dom()\n  element.textContent=self.textContent\n  element.href=\"#\"if not self.external else self.to\n  if not self.external:\n   element.bind(\"click\",self.navigate)\n  return element\n def navigate(self,e):\n  e.preventDefault()\n  Router.push(self.to)\n", ["pyfyre.router", "pyfyre.widgets.widget"]], "pyfyre.widgets.listbuilder": [".py", "from pyfyre.widgets.widget import Widget\nclass ListBuilder(Widget):\n def __init__(self,count=1,builder=None ,className=\"\",props:dict=None ):\n  super().__init__(\"div\",className=className,props=props)\n  self.count=count\n  self.builder=builder\n def dom(self):\n  element=super().dom()\n  for i in range(self.count):\n   element.appendChild(self.builder(i).dom())\n  return element\n", ["pyfyre.widgets.widget"]], "pyfyre.widgets.states": [".py", "\nfrom pyfyre.core.initializeEnvironment import initializeEnvironment\nfrom pyfyre.globals import Globals\nfrom pyfyre.core.exceptions import RenderError\nclass UsesState:\n def __init__(self):\n  self.domElement=None\n  initializeEnvironment()\n def build(self):\n  pass\n def dom(self):\n  try :\n   self.domElement=self.build().dom()\n   return self.domElement\n  except Exception as e:\n   if Globals.DEBUG:raise e\n   self.domElement=self.onerror(e).dom()\n   return self.domElement\n def onerror(self,e):\n  return RenderError(\"Oh no! Something went wrong. We're working on fixing it.\",e)\n def update(self):\n  parentNode=self.domElement.parentNode\n  self.domElement.remove()\n  self.domElement=self.dom()\n  parentNode.appendChild(self.domElement)\nclass State:\n def __init__(self,values):\n  self.values=values\n  if not isinstance(values,dict):\n   self.setValue(\"value\",values)\n   return\n  for k,v in self.values.items():\n   self.setValue(k,v)\n def setValue(self,of,to):\n  setattr(self,of,to)\n", ["pyfyre.core.exceptions", "pyfyre.core.initializeEnvironment", "pyfyre.globals"]], "pyfyre.widgets.text": [".py", "from pyfyre.widgets.widget import Widget\nclass Text(Widget):\n def __init__(self,textContent:str,className=\"\",props:dict=None ):\n  super().__init__(\"p\",className=className,props=props)\n  self.textContent=textContent\n def dom(self):\n  element=super().dom()\n  element.textContent=self.textContent\n  return element\n", ["pyfyre.widgets.widget"]], "pyfyre.widgets.textinput": [".py", "from pyfyre.core.exceptions import InvalidController\nfrom pyfyre.widgets.widget import Widget\nclass TextInput(Widget):\n def __init__(self,controller=None ,onInput=None ,defaultValue=\"\",className=\"\",props:dict=None ):\n  super().__init__(\"input\",className=className,props=props)\n  self.controller=controller\n  self.onInput=onInput\n  self.defaultValue=defaultValue\n def dom(self):\n  element=super().dom()\n  element.value=self.defaultValue\n  if self.controller:\n   self.controller.callback(self)\n   def bindController(event):\n    self.controller.state=element.value\n   element.bind('input',bindController)\n   if self.controller.state:\n    element.value=self.controller.state\n  if self.onInput:\n   def wrapper(event):\n    self.onInput(element.value)\n   element.bind('input',wrapper)\n  return element\nclass TextInputController:\n def __init__(self):\n  self.this=None\n  self.state=None\n  self.readOnly=False\n  self.disabled=False\n def changeAttribute(self,readOnly=False ,disabled=False ):\n  if not self.this or not isinstance(self.this,TextInput):\n   raise InvalidController(\"Looks like you haven't called this controller as a parameter controller of TextInput or you provided an invalid controller.\")\n  self.readOnly=readOnly\n  self.disabled=disabled\n  if self.readOnly:\n   self.this.element.attrs['readonly']=None\n  else :\n   if 'readonly'in self.this.element.attrs:\n    del self.this.element.attrs['readonly']\n  if self.disabled:\n   self.this.element.attrs['disabled']=None\n  else :\n   if 'disabled'in self.this.element.attrs:\n    del self.this.element.attrs['disabled']\n def callback(self,this:TextInput):\n  self.this=this\n @property\n def value(self):\n  return self.this.element.value\n def setValue(self,newValue):\n  self.state=newValue\n", ["pyfyre.core.exceptions", "pyfyre.widgets.widget"]], "pyfyre.widgets.widget": [".py", "from browser import document\nclass Widget:\n def __init__(self,tagname:str,*,className,props:dict=None ):\n  self.tagname=tagname\n  self.className=className\n  self.element=None\n  self.props=props if props is not None else {}\n def dom(self):\n  element=document.createElement(self.tagname)\n  element.className=self.className\n  self.element=element\n  for key,value in self.props.items():\n   element.attrs[key]=value\n  return element\n", ["browser"]], "pyfyre.widgets": [".py", "from pyfyre.widgets.button import Button\nfrom pyfyre.widgets.container import Container\nfrom pyfyre.widgets.image import Image\nfrom pyfyre.widgets.link import Link\nfrom pyfyre.widgets.listbuilder import ListBuilder\nfrom pyfyre.widgets.text import Text\nfrom pyfyre.widgets.textinput import TextInput,TextInputController\nfrom pyfyre.widgets.clickable import Clickable\nfrom pyfyre.widgets.states import UsesState,State\n__all__=[\n'Button','Container','Image',\n'Link','ListBuilder','Clickable',\n'Text','TextInput','TextInputController',\n'Clickable','UsesState','State'\n]\n", ["pyfyre.widgets.button", "pyfyre.widgets.clickable", "pyfyre.widgets.container", "pyfyre.widgets.image", "pyfyre.widgets.link", "pyfyre.widgets.listbuilder", "pyfyre.widgets.states", "pyfyre.widgets.text", "pyfyre.widgets.textinput"], 1]}
__BRYTHON__.update_VFS(scripts)
